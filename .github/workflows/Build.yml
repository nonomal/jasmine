name: Build

on:
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  RUST_TOOLCHAIN: nightly-2024-12-02
  NDK_VERSION: 25.2.9519653

jobs:

  ci-pass:
    name: CI is green
    runs-on: ubuntu-latest
    needs:
      - build_release_assets
    steps:
      - run: exit 0

  build_release_assets:
    name: Build release assets
    strategy:
      fail-fast: false
      matrix:
        config:
          - target: linux
            host: ubuntu-latest
            flutter_version: '3.7.3'
            flutter_channel: 'stable'
          - target: windows
            host: windows-latest
            flutter_version: '3.7.3'
            flutter_channel: 'stable'
          - target: macos
            host: macos-latest
            flutter_version: '3.7.3'
            flutter_channel: 'stable'
          - target: ios
            host: macos-latest
            flutter_version: '3.7.3'
            flutter_channel: 'stable'
          - target: android-arm32
            host: ubuntu-latest
            flutter_version: '3.7.3'
            flutter_channel: 'stable'
          - target: android-arm64
            host: ubuntu-latest
            flutter_version: '3.7.3'
            flutter_channel: 'stable'
          - target: android-x86_64
            host: ubuntu-latest
            flutter_version: '3.7.3'
            flutter_channel: 'stable'

    runs-on: ${{ matrix.config.host }}

    env:
      TARGET: ${{ matrix.config.target }}
      flutter_version: ${{ matrix.config.flutter_version }}
      flutter_channel: ${{ matrix.config.flutter_channel }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - id: check_asset
        name: Check asset
        run: |
          echo "::set-output name=skip_build::false"

      - name: checkout core
        if: steps.check_asset.outputs.skip_build != 'true'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: 'niuhuan/jasmine-rs-core'
          path: 'native'

      - name: Cache Flutter dependencies (Linux/Android)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.host == 'ubuntu-latest'
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter

      - name: Setup flutter
        if: steps.check_asset.outputs.skip_build != 'true'
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.flutter_channel }}
          flutter-version: ${{ env.flutter_version }}
          architecture: x64

      - name: Install cargo tools (non-android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'macos' || matrix.config.target == 'windows' || matrix.config.target == 'linux' || matrix.config.target == 'ios' )
        run: |
          cargo install --force cbindgen

      - name: Install cargo tools (Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        run: |
          cargo install --force cargo-ndk

      - name: Setup java (Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup android tools (Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546
          packages: 'platform-tools platforms;android-32 build-tools;30.0.2 ndk;${{ env.NDK_VERSION }}'

      - name: Install libfuse2 (Linux)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libfuse2

      - name: Set-Version (All)
        if: steps.check_asset.outputs.skip_build != 'true'
        run: |
          cd ci
          cp version.code.txt ../lib/assets/version.txt

      - name: Sed old deps (Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.flutter_version == '2.10.5')
        run: |
          sed -i "s/another_xlider: ^1.0.1+2/another_xlider: 1.0.1+2/g" pubspec.yaml
          sed -i "s/flutter_styled_toast: ^2.0.0/flutter_styled_toast: 2.0.0/g" pubspec.yaml
          sed -i "s/filesystem_picker: ^3.1.0/filesystem_picker: 2.0.0/g" pubspec.yaml
          sed -i "s/file_picker: 5.2.1/file_picker: 4.6.1/g" pubspec.yaml
          sed -i "s/modal_bottom_sheet: ^3.0.0-pre/modal_bottom_sheet: ^2.0.0/g" pubspec.yaml
          sed -i "s/window_manager: ^0.3.2//g" pubspec.yaml
          echo > lib/basic/desktop.dart
          sed -i 's/import '\''basic\/desktop.dart'\'';/\n/g' lib/main.dart
          sed -i "s/onDesktopStart();//g" lib/main.dart
          sed -i "s/onDesktopStop();//g" lib/main.dart
          

      - name: Append application-identifier (ios)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'ios')
        run: |
          /usr/libexec/PlistBuddy -c 'Add :application-identifier string opensource.jasmine' ios/Runner/Info.plist

      - name: Install rust target and build (ios)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'ios')
        run: |
          rustup target install aarch64-apple-ios
          cargo build --manifest-path native/jmbackend/platforms/ios/Cargo.toml --features= --lib --release --target=aarch64-apple-ios
          cp native/jmbackend/platforms/ios/target/aarch64-apple-ios/release/librust.a ios/
          cbindgen native/jmbackend/src/lib.rs -l c > ios/rust.h
          flutter build ios --no-simulator --no-codesign --release
          cd build
          rm -rf Payload
          mkdir Payload
          mv ios/iphoneos/Runner.app Payload/
          sh ../scripts/thin-payload.sh Payload
          zip -r -9 nosign.ipa Payload
          cd ..

#          tar zxvf pdfium-ios-device-arm64.tgz --strip-components=1 -C ios/Runner lib/libpdfium.dylib
#          flutter build ios --no-simulator --no-codesign --release
#
      # if ios-sim
      # cargo build --manifest-path native/jmbackend/platforms/ios-sim/Cargo.toml --features= --lib --release --target=aarch64-apple-ios-sim
      # cargo build --manifest-path native/jmbackend/platforms/ios-sim/Cargo.toml --features= --lib --release --target=x86_64-apple-ios
      # lipo -create -output ios/librust.a native/jmbackend/platforms/ios-sim/target/x86_64-apple-ios/release/librust.a native/jmbackend/platforms/ios-sim/target/aarch64-apple-ios-sim/release/librust.a
      # cbindgen native/jmbackend/src/lib.rs -l c > ios/rust.h

      - name: Install rust target and build (Android-arm64)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm64')
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          rustup target install aarch64-linux-android
          cd native/jmbackend/platforms/android
          cargo ndk -o ../../../../android/app/src/main/jniLibs -t arm64-v8a build --release
          cd ../../../..
          flutter build apk --target-platform android-arm64

      - name: Install rust target and build (Android-arm32)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32')
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          rustup target install armv7-linux-androideabi
          cd native/jmbackend/platforms/android
          cargo ndk -o ../../../../android/app/src/main/jniLibs -t armeabi-v7a build --release
          cd ../../../..
          flutter build apk --target-platform android-arm

      - name: Install rust target and build (Android-x86_64)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-x86_64')
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}
          rustup target install x86_64-linux-android
          cd native/jmbackend/platforms/android
          cargo ndk -o ../../../../android/app/src/main/jniLibs -t x86_64 build --release
          cd ../../../..
          flutter build apk --target-platform android-x64

      - name: Install dependencies and build (Linux)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt install -y ninja-build liblzma-dev libgtk-3-dev libgl1-mesa-dev xorg-dev
          curl -JOL https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod a+x appimagetool-x86_64.AppImage
          mv appimagetool-x86_64.AppImage appimagetool

          cargo build --manifest-path native/jmbackend/platforms/linux/Cargo.toml --features= --lib --release --target=x86_64-unknown-linux-gnu
          cp native/jmbackend/platforms/linux/target/x86_64-unknown-linux-gnu/release/librust.a linux/
          cbindgen native/jmbackend/src/lib.rs -l c++ > linux/rust.h
          
          cbindgen native/jmbackend/platforms/linux/src/lib.rs -l c++ > linux/rust1.h

          flutter config --enable-linux-desktop
          flutter build linux --release
          mv build/linux/x64/release/bundle/{jasmine,AppRun}
          cp linux/appimage/* build/linux/x64/release/bundle/
          ./appimagetool build/linux/x64/release/bundle/
          mv *.AppImage build/linux.AppImage


      - name: build (windows)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'windows'
        run: |
          cargo build --manifest-path native/jmbackend/platforms/windows/Cargo.toml --release --target x86_64-pc-windows-msvc
          cp native/jmbackend/platforms/windows/target/x86_64-pc-windows-msvc/release/rust.lib windows/          
          cbindgen native/jmbackend/src/lib.rs -l c++ > windows/rust.h
          flutter config --enable-windows-desktop
          flutter build windows
          cd build/windows/runner/Release
          Compress-Archive * ../../../../build/windows.zip
          cd ../../../..

      - name: Build (macos)
        if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'macos'
        run: |
          rustup target install x86_64-apple-darwin
          rustup target install aarch64-apple-darwin
          cargo build --manifest-path native/jmbackend/platforms/macos/Cargo.toml --release --target x86_64-apple-darwin
          cargo build --manifest-path native/jmbackend/platforms/macos/Cargo.toml --release --target aarch64-apple-darwin
          lipo -create -output macos/librust.a native/jmbackend/platforms/macos/target/x86_64-apple-darwin/release/librust.a native/jmbackend/platforms/macos/target/aarch64-apple-darwin/release/librust.a
          cbindgen native/jmbackend/src/lib.rs -l c > macos/rust.h
          flutter config --enable-macos-desktop
          flutter build macos
          cd build
          mkdir appimage
          mv macos/Build/Products/Release/jasmine.app appimage/
          ln -sf /Applications appimage/
          hdiutil create -volname jasmine -srcfolder appimage -ov -format UDBZ macos.dmg
          cd ..

      - name: Sign APK (Android)
        if: steps.check_asset.outputs.skip_build != 'true' && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        env:
          KEY_FILE_BASE64: ${{ secrets.KEY_FILE_BASE64 }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo $KEY_FILE_BASE64 > key.jks.base64
          base64 -d key.jks.base64 > key.jks
          echo $KEY_PASSWORD | $ANDROID_HOME/build-tools/30.0.2/apksigner sign --ks key.jks build/app/outputs/flutter-apk/app-release.apk


      - if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'ios'
        name: 'Upload Artifact (iOS)'
        uses: actions/upload-artifact@v4
        with:
          name: 'nosign.ipa'
          path: 'build/nosign.ipa'
          retention-days: 3
      - if: steps.check_asset.outputs.skip_build != 'true' && startsWith(matrix.config.target, 'android')
        name: 'Upload Artifact (Android)'
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.config.target}}.apk
          path: 'build/app/outputs/flutter-apk/app-release.apk'
          retention-days: 3
      - if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'linux'
        name: 'Upload Artifact (Linux)'
        uses: actions/upload-artifact@v4
        with:
          name: 'build.AppImage'
          path: 'build/linux.AppImage'
          retention-days: 3
      - if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'macos'
        name: 'Upload Artifact (MacOS)'
        uses: actions/upload-artifact@v4
        with:
          name: 'build.dmg'
          path: 'build/macos.dmg'
      - if: steps.check_asset.outputs.skip_build != 'true' && matrix.config.target == 'windows'
        name: 'Upload Artifact (Windows)'
        uses: actions/upload-artifact@v4
        with:
          name: 'windows.zip'
          path: 'build/windows.zip'

